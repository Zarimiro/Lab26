#include<iostream>
#include<complex>
#include<conio.h>
#include <cctype>

using namespace std;
template <typename T>
class Complex {
	std::complex< double >number;
public:
	Complex() {
		number = 0;
	}
	void print(ostream &) {

		cout << "\nComplex number: " << conj(number);
	}

	void add(std::complex< double >x, std::complex< double >y) {
		number = x + y;
		cout << "\nProceeding with summ...";
		cout << "\n" << conj(x) << " + " << conj(y) << " = " << conj(number)<<endl;
	}
	void sub(std::complex< double >x, std::complex< double >y) {
		number = x-y;
		cout << "\nProceeding with substraction...";
		cout << "\n" << conj(x) << " - " << conj(y) << " = " << conj(number)<<endl;
	}
	template <typename T>
	void mult(std::complex< double >x,T y) {
		std::complex< double >buf(double(y), 0.0);
		number = x * buf;
		cout << "\nProceeding with multiplication...";
		cout << "\n" << conj(x) << " * " << y << " = " << conj(number) << endl;
	}
	template<typename T>
	void div(std::complex< double >x, T y) {
		try {
			if (y != 0) {
				std::complex< double >buf(double(y), 0.0);
				this->number = x / buf;
				cout << "\nProceeding with division...";
				cout << "\n" << conj(x) << " / " << y << " = " << conj(number) << endl;
			}
			else throw "Can't divide by zero!";
		}
		catch (char *err) {
			cout << "\nProceeding with division...";
			cout << "\n" << conj(x) << " / " << 0;
			cout << "\nError:" << err;
			cout << "\nChange another number...";
				char str[64];
				cin >> str;
				int new_num;
				if (isdigit(str[0])) {
					new_num = atoi(str);
					cout << new_num;
				}
			}
		}
	
};



int main() {
	std::complex< double >x(1.0, 3.0);
	std::complex< double >y(4.0, 2.0);
	Complex <double>C;
	C.add(x,y);
	C.sub(x,y);
	C.mult(x, 5);
	C.div(x,3);
	C.div(x, 0);


	_getch();
	return 0;
}
